struct persona *buscarPersonaPorRut(struct nodoPersonasABB *personas, char *rutBuscado)
{
    /** esto es para que retorne NULL si no encuentra la persona, ya que al ser recursivo
    Esto sera NULL cuando personas apunte a NULL y eso significa que llego a la hoja del arbol
    por lo cual no hay donde mas buscar**/

    if (personas == NULL || rutBuscado == NULL || personas->datosPersona == NULL
        || personas->datosPersona->rut == NULL)
    {
        return NULL;
    }


    //compara datos del arbol con el buscado
    int comparacionActual = strcmp(personas->datosPersona->rut, rutBuscado);

    /** comparacionActual == 0 se encontro
    comparacionActual > 0 vamos a la izquierda (menores), ya que el numero en el que estamos es mayor al buscado
    comparacionActual < 0 (o else) vamos a la derecha (mayores), ya que el numero en el que estamos es menor al buscado
    **/

    if (comparacionActual == 0)
    {
        return personas->datosPersona;
    }
    else if (comparacionActual > 0)
    {
        return buscarPersonaPorRut(personas->izquierda, rutBuscado);
    }
    else
    {
        return buscarPersonaPorRut(personas->derecha, rutBuscado);
    }
}

void mostrarUsuarioPorRut(struct nodoPersonasABB *personas, char *rutBuscado) {
    //se busca a la persona indicada
    struct persona *personaBuscada = buscarPersonaPorRut(personas, rutBuscado);

    //si no se encuentra o algun dato es invalido, retorna mensaje de error
    if (personaBuscada == NULL)
    {
        printf("Se genero un error al buscar el usuario o este no existe\n");
        return;
    }

    //si se encuentra y no es null (paso el if anterior), muestra los datos de la persona

    printf("Nombre      : %s\n", personaBuscada->nombre);
    printf("Apellido    : %s\n", personaBuscada->apellido);
    printf("Rut         : %s\n", personaBuscada->rut);

    /** 1 = usuario comun, 2 = fiscal, 3 = juez**/
    if (personaBuscada->rol == 1)
        printf("Rol         : Usuario Común\n");
    else if(personaBuscada->rol == 2)
        printf("Rol         : Fiscal\n");
    else if(personaBuscada->rol == 3)
        printf("Rol         : Juez\n");
}

void mostrarDenunciaPorRut(struct nodoPersonasABB *personas, char *rutBuscado) {
    //se busca a la persona indicada
    struct persona *personaBuscada = buscarPersonaPorRut(personas, rutBuscado);

    //si no se encuentra o algun dato es invalido, retorna mensaje de error
    if (personaBuscada == NULL)
    {
        printf("Se genero un error al buscar el usuario o este no existe\n");
        return;
    }

    struct nodoDenuncias *actual = personaBuscada->denuncias;
    int contadorDenuncias = 0;

    printf("========================================\n");
    printf("Denuncias de %s %s | Rut: %s\n", personaBuscada->nombre, personaBuscada->apellido, personaBuscada->rut);
    printf("========================================\n");

    while (actual != NULL)
    {
        if (actual->datosDenuncia != NULL)
        {
            contadorDenuncias++;
            printf("\n--------- DENUNCIA %d ---------\n", contadorDenuncias);
            printf("RUC           : %s\n", actual->datosDenuncia->ruc);
            printf("Fecha         : %s\n", actual->datosDenuncia->fecha);
            printf("Descripción   : %s\n", actual->datosDenuncia->descripcion);
            printf("Tipo de delito: %s\n", actual->datosDenuncia->tipoDeDenuncia);

            //Si el rut del denunciante es el mismo de la persona buscada significa que la persona envio esta denuncia
            if (strcmp(actual->datosDenuncia->denunciante->rut, personaBuscada->rut) == 0) {
                printf("Denuncia Enviada a %s %s\n", actual->datosDenuncia->denunciado->nombre,
                    actual->datosDenuncia->denunciado->apellido);
            }
            //si el rut del denunciado es el mismo de la persona buscada significa que la persona recibio esta denuncia
            if (strcmp(actual->datosDenuncia->denunciado->rut, personaBuscada->rut) == 0) {
                printf("Denuncia Recibida por %s %s\n", actual->datosDenuncia->denunciante->nombre,
                    actual->datosDenuncia->denunciante->apellido);
            }
        }
        actual = actual->siguiente;
    }
    if (contadorDenuncias == 0)
    {
        printf("No se encontraron denuncias asociadas a este usuario.\n");
    }
}


void mostrarDenunciaDeCausa(struct causa *causaActual) {
    if (causaActual == NULL || causaActual->denuncia == NULL)
    {
        printf("La causa no contiene denuncia.\n");
        return;
    }

    struct denuncia *denuncia = causaActual->denuncia;
    printf("========================================\n");
    printf("DENUNCIA EN LA CAUSA RUC: %s\n", causaActual->ruc);
    printf("========================================\n");
    printf("RUC           : %s\n", denuncia->ruc);
    printf("Fecha         : %s\n", denuncia->fecha);
    printf("Descripción   : %s\n", denuncia->descripcion);
    printf("Delito        : %s\n", denuncia->tipoDeDenuncia);
    if (denuncia->denunciante != NULL && denuncia->denunciado != NULL)
    {
        printf("Denunciante   : %s %s (RUT: %s)\n", denuncia->denunciante->nombre,
               denuncia->denunciante->apellido, denuncia->denunciante->rut);
        printf("Denunciado    : %s %s (RUT: %s)\n", denuncia->denunciado->nombre,
               denuncia->denunciado->apellido, denuncia->denunciado->rut);
    }
    else if (denuncia->denunciante == NULL && denuncia->denunciado != NULL)
    {
        printf("Denunciante   : Anonimo\n");
        printf("Denunciado    : %s %s (RUT: %s)\n", denuncia->denunciado->nombre,
                 denuncia->denunciado->apellido, denuncia->denunciado->rut);
    }
    else if (denuncia->denunciante != NULL && denuncia->denunciado == NULL)
    {
        printf("Denunciante   : %s %s (RUT: %s)\n", denuncia->denunciante->nombre,
                 denuncia->denunciante->apellido, denuncia->denunciante->rut);
        printf("Denunciado    : Contra los que resulten culpables\n");
    }
}

struct causa *buscarCausaPorRuc(struct nodoCausas *causas, char *rucBuscado) {
    if (causas == NULL || rucBuscado == NULL) return NULL;

    struct nodoCausas *actual = causas;

    do {
        if (strcmp(actual->datosCausa->ruc, rucBuscado) == 0)
        {
            return actual->datosCausa;
        }

        actual = actual->siguiente;
    } while (actual != causas);

    return NULL;
}

void mostrarDatosImputados(struct datosImputados *datosImputados) {
    if (datosImputados == NULL)
    {
        printf("Este imputado no tiene datos específicos.\n");
        return;
    }
    /**1 = Prision Preventiva, 2 = Arraígo nacional, 3 = firma periódica,
    4 = orden de alejamiento, 5 = arresto domicilario, 6 = libertad bajo fianza, 7 = ninguna**/
    printf("\n--- Datos Imputado Asociados ---\n");
    printf("Declaración: %s\n", datosImputados->declaracion);

    if (datosImputados->estadoProcesal == 1) {
        printf("Estado procesal: Medida cautelar\n");
        if (datosImputados->medidasCautelar == 1) {
            printf("Medida cautelar: Prisión Preventiva\n");
        }
        else if (datosImputados->medidasCautelar == 2) {
            printf("Medida cautelar: Arraigo nacional\n");
        }
        else if (datosImputados->medidasCautelar == 3) {
            printf("Medida cautelar: Firma periódica\n");
        }
        else if (datosImputados->medidasCautelar == 4) {
            printf("Medida cautelar: Orden de alejamiento\n");
        }
        else if (datosImputados->medidasCautelar == 5) {
            printf("Medida cautelar: Arresto domiciliario\n");
        }
        else if (datosImputados->medidasCautelar == 6) {
            printf("Medida cautelar: Libertad bajo fianza\n");
        }
        else if (datosImputados->medidasCautelar == 7) {
            printf("Medida cautelar: Ninguna, Imputado aun no posee medida cautelar.\n");
            return;
        }

        printf("Fecha inicio medida: %s\n", datosImputados->fechaInicioMedida);
        printf("Fecha fin medida: %s\n", datosImputados->fechaFinMedida);
    }
    else if (datosImputados->estadoProcesal == 2) {
        printf("Estado procesal: Formalizado\n");
    }
    else if (datosImputados->estadoProcesal == 3) {
        printf("Estado procesal: Sobreseído\n");
    }
}

void mostrarInvolucradosCausa(struct causa *causa) {
    if (causa == NULL) {
        printf("La causa no existe.\n");
        return;
    }
    if (causa->involucrados == NULL)
    {
        printf("La causa no contiene involucrados.\n");
        return;
    }

    int i = 0;

    for (i = 0; i < causa->tamInvolucrados; i++)
    {
        //1 = victima, 2 = imputado, 3 = fiscal, 4 = juez
        if (causa->involucrados[i] != NULL)
        {
            printf("\n========================================\n");
            printf("INVOLUCRADO #%d\n", i + 1);
            printf("========================================\n");
            printf("RUT           : %s\n", causa->involucrados[i]->persona->rut);
            printf("Nombre        : %s\n", causa->involucrados[i]->persona->nombre);
            printf("Apellido      : %s\n", causa->involucrados[i]->persona->apellido);
            if (causa->involucrados[i]->tipoInvolucrado == 1) {
                printf("Rol dentro de la causa: Victima\n");
            }
            else if (causa->involucrados[i]->tipoInvolucrado == 2) {
                printf("Rol dentro de la causa: Imputado\n");
                mostrarDatosImputados(causa->involucrados[i]->datosImputados);
            }
            else if (causa->involucrados[i]->tipoInvolucrado == 3) {
                printf("Rol dentro de la causa: Fiscal\n");
            }
            else if (causa->involucrados[i]->tipoInvolucrado == 4) {
                printf("Rol dentro de la causa: Juez\n");
            }
        }
    }

}

void mostrarDatosDiligencia(struct datosDiligencias *diligencia)
{
    if (diligencia == NULL)
    {
        printf("No hay diligencia asociada.\n");
        return;
    }
    printf("\n--- Diligencia Asociada ---\n");
    printf("Prioridad      : %d\n", diligencia->prioridad);
    printf("Fecha inicio   : %s\n", diligencia->fechaInicio);
    printf("Fecha fin      : %s\n", diligencia->fechaFin);
    printf("Estado         : %s\n", diligencia->estado);
    printf("Tipo           : %s\n", diligencia->tipoDiligencia);
    printf("Descripción    : %s\n", diligencia->descripcion);
}

void mostrarDatosDenunciaAdicionalEnCausa(struct denuncia *denuncia)
{
    if (denuncia == NULL)
    {
        printf("No hay denuncia adicional asociada.\n");
        return;
    }
    printf("\n--- Denuncia Asociada ---\n");
    printf("RUC            : %s\n", denuncia->ruc);
    printf("Fecha          : %s\n", denuncia->fecha);
    printf("Descripción    : %s\n", denuncia->descripcion);
    printf("Delito         : %s\n", denuncia->tipoDeDenuncia);
    if (denuncia->denunciante != NULL)
        printf("Denunciante    : %s %s (RUT: %s)\n", denuncia->denunciante->nombre,
            denuncia->denunciante->apellido,
            denuncia->denunciante->rut);
    if (denuncia->denunciado != NULL)
        printf("Denunciado     : %s %s (RUT: %s)\n", denuncia->denunciado->nombre,
            denuncia->denunciado->apellido,
            denuncia->denunciado->rut);
}

void mostrarDatosCarpetaCausa(struct causa *causa)
{
    if (causa == NULL || causa->datosCarpetas == NULL)
    {
        printf("La causa no contiene carpeta investigativa.\n");
        return;
    }

    struct nodoDatosCarpetas *actual = causa->datosCarpetas;
    int contador = 0;

    while (actual != NULL)
    {
        struct datosCarpeta *carpeta = actual->datosCarpeta;
        if (carpeta != NULL)
        {
            contador++;
            printf("\n========================================\n");
            printf("DATO DE CARPETA #%d\n", contador);
            printf("========================================\n");
            printf("Fecha          : %s\n", carpeta->fecha);
            printf("Descripción    : %s\n", carpeta->descripcion);

            if (carpeta->datosPersona != NULL)
            {
                printf("Persona asociada:\n");
                printf("  Nombre       : %s\n", carpeta->datosPersona->nombre);
                printf("  Apellido     : %s\n", carpeta->datosPersona->apellido);
                printf("  Rut          : %s\n", carpeta->datosPersona->rut);
            }

            if (carpeta->tipoDeDato == 1)
                printf("Tipo de dato   : Declaración\n");
            else if (carpeta->tipoDeDato == 2)
                printf("Tipo de dato   : Prueba general (Fotos, videos, etc)\n");
            else if (carpeta->tipoDeDato == 3)
            {
                printf("Tipo de dato   : Diligencia\n");
                mostrarDatosDiligencia(carpeta->datosDiligencias);
            }
            else if (carpeta->tipoDeDato == 4) {
                printf("Tipo de dato   : Denuncia\n");
                mostrarDatosDenunciaAdicionalEnCausa(carpeta->datosDenuncia);
            }
            else
                printf("Tipo de dato   : Desconocido\n");

        }
        actual = actual->siguiente;
    }

    if (contador == 0)
        printf("No existen datos en la carpeta investigativa de esta causa.\n");
}


void mostrarTodoDatoDeCausaPorRuc(struct nodoCausas *causas, char *rucBuscado) {
    //se busca a la carpeta indicada
    struct causa *causaBuscada = buscarCausaPorRuc(causas, rucBuscado);

    //si no se encuentra o algun dato es invalido, retorna mensaje de error
    if (causaBuscada == NULL)
    {
        printf("Se genero un error al buscar la carpeta o esta no existe\n");
        return;
    }

    printf("\n========================================\n");
    printf("Causa con Ruc: %s\n", causaBuscada->ruc);
    printf("========================================\n");

    // Sección de denuncias
    printf("\n>> DENUNCIA REGISTRADA:\n");
    mostrarDenunciaDeCausa(causaBuscada);

    // Sección de involucrados
    printf("\n>> INVOLUCRADOS:\n");
    mostrarInvolucradosCausa(causaBuscada);

    // Sección de datos de la carpeta
    printf("\n>> DATOS CARPETA INVESTIGATIVA:\n");
    mostrarDatosCarpetaCausa(causaBuscada);

    printf("========================================\n\n");
}
