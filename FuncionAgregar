void agregarPersonas(struct nodoPersonas **persona, struct persona *nuevaPersona) { //paso el nodo con doble puntero para modificar el head.
    struct nodoPersonas *nuevoNodo = (struct nodoPersonas *)malloc(sizeof(struct nodoPersonas));
    nuevoNodo->datosPersona = nuevaPersona;

    if (*persona == NULL) { // caso en que la lista circular se encuentre vacia
        *persona = nuevoNodo;
        nuevoNodo->siguiente = nuevoNodo;
        nuevoNodo->anterior = nuevoNodo;
    }

    else { // en caso contrario, agregamos en el ultimo nodo, antes del head.
        struct nodoPersonas *ultimo = (*persona)->anterior;// buscamos el ultimo dato de la lista circular.
        nuevoNodo->siguiente = *persona; 
        nuevoNodo->anterior = ultimo;
        ultimo->siguiente = nuevoNodo;
        (*persona)->anterior = nuevoNodo;
    }
}

void agregar(struct ministerio *ministerio){
    int opcion;

    printf("Marque una opcion: \n\n");
    printf("Opcion 1: Agregar persona\n");
    printf("Opcion 2: Agregar denuncia\n");
    printf("Opcion 3: Agregar carpeta investigativa\n");
    scanf("%d", &opcion);

    if (opcion == 1) {
        struct persona *nuevaPersona = (struct persona *)malloc(sizeof(struct persona));
        char palabra[300];
        
        if(nuevaPersona == NULL)printf("Error al asignar memora");
        return;

        printf("Ingrese nombre del denunciante: ");
        scanf(" %[^\n]", palabra);
        nuevaPersona->nombre = (char *)malloc(strlen(palabra) + 1);
        strcpy(nuevaPersona->nombre, palabra);

        printf("Ingrese apellido del denunciante: ");
        scanf(" %[^\n]", palabra);
        nuevaPersona->apellido = (char *)malloc(strlen(palabra) + 1);
        strcpy(nuevaPersona->apellido, palabra);

        printf("Ingrese rut del denunciante: ");
        scanf(" %[^\n]", palabra);
        nuevaPersona->rut = (char *)malloc(strlen(palabra) + 1);
        strcpy(nuevaPersona->rut, palabra);

        printf("Ingrese nacionalidad del denunciante: ");
        scanf(" %[^\n]", palabra);
        nuevaPersona->nacionalidad = (char *)malloc(strlen(palabra) + 1);
        strcpy(nuevaPersona->nacionalidad, palabra);

        nuevaPersona->denuncias = NULL; // Por ahora no se agregan denuncias acÃ¡

        agregarPersonas(&ministerio->personas, nuevaPersona); // Agrega la persona a la lista circular
    } /*agregar persona*/

    else if(opcion == 2){
        
        char rutDenunciante[100];
        char rutDenunciado[100];
        char palabra[100];
        
        printf("Ingrese RUT del denunciante");
        scanf(" %[^\n]", rutDenunciante);
        
        printf("Ingrese RUT del denunciado");
        scanf(" %[^\n]", rutDenunciado);
        
        struct persona *nuevoDenunciante = buscarPersona(ministerio->personas, rutDenunciante);
        struct persona *nuevoDenunciado = buscarPersona(ministerio->personas, rutDenunciado);
        
        if(nuevoDenunciante == NULL || nuevoDenunciado == NULL)printf("Denunciante y denunciado no encontrados, intente con un RUT valido");
        return;
    
        struct denuncia *nuevaDenuncia = (struct denuncia *)malloc(sizeof(struct denuncia));
        
        if(nuevaDenuncia == NULL)printf("Error al asignar memoria");
        return;
        
        nuevaDenuncia->denunciante = nuevoDenunciante;
        nuevaDenuncia->denunciado = nuevoDenunciado;
        
        printf("Ingrese la fecha actual: \n");
        scanf(" %[^\n]", palabra);
        nuevaDenuncia->fecha = (char *)malloc(strlen(palabra) + 1);
        strcpy(nuevaDenuncia->fecha, palabra);
        
        printf("Ingrese descripcion de la denuncia: \n");
        scanf(" %[^\n]", palabra);
        nuevaDenuncia->descripcion = (char *)malloc(strlen(palabra) + 1);
        strcpy(nuevaDenuncia->descripcion, palabra);        
    
        printf("Ingrese RUC de la denuncia: \n");
        scanf(" %[^\n]", palabra);
        nuevaDenuncia->ruc = (char *)malloc(strlen(palabra) + 1);
        strcpy(nuevaDenuncia->ruc, palabra);    

        printf("Ingrese el tipo de denuncia: ");
        scanf(" %[^\n]", palabra);
        nuevaDenuncia->tipoDeDenuncia = (char *)malloc(strlen(palabra) + 1);
        strcpy(nuevaDenuncia->tipoDeDenuncia, palabra);        
        
        agregarDenunciasDenunciante(rutDenunciante, ministerio, nuevaDenuncia);
        agregarDenunciasDenunciado(rutDenunciado, ministerio, nuevaDenuncia);
        
        /* recorrer ministerio->personas y validar que el rut sea el del denunciante o denunciado (en cada caso) si es el rut, agregar a la lista de denuncias  */
        
        /*buscar el rut y recorrer la lista de denuncias que tiene, agregar */
    } /*agregar denuncia*/
    
    else if(opcion == 3){
        
        char palabra[300];
        
        struct carpeta *nuevaCarpeta = (struct carpeta *)malloc(struct carpeta);
        
        if(nuevaCarpeta == NULL)printf("Error al asignar memoria");
        return;
        
        
        printf("Ingrese RUC de la carpeta");
        scanf(" %[^\n]", palabra);
        nuevaCarpeta->ruc = (char *)malloc(strlen(palabra) + 1);
        strcpy(nuevaCarpeta->ruc, palabra);    

        nuevaCarpeta->denuncias = NULL;
        nuevaCarpeta->declaraciones = NULL;
        nuevaCarpeta->pruebas = NULL;
        nuevaCarpeta->diligencias = NULL;
        nuevaCarpeta->imputados = NULL;
        nuevaCarpeta->resoluciones = NULL;
        
        agregarCarpeta(listaCarpeta, nuevaCarpeta);
    } /*agregar carpeta*/
}
