void modificarDenunciaMenu(struct ministerio *ministerio) {
    char ruc[20];
    printf("Ingrese el RUC de la denuncia que desea modificar: ");
    if (fgets(ruc, sizeof(ruc), stdin != NUll )) { // si la lectura erronea devuelve NULL
        ruc[strcspn(ruc, "\n")] = '\0';  // Quitar salto de línea
    }

    struct denuncia *denunciaMod = buscarDenunciaPorRUC(ministerio, ruc);

    if (denunciaMod == NULL) {
        printf("No se encontró una denuncia con el RUC ingresado.\n");
        return;
    }

    int opcion = -1;
    char palabras[300];

    do {
        printf("\n--- MODIFICAR DENUNCIA ---\n");
        printf("1. Modificar Fecha (Actual: %s)\n", denunciaMod->fecha);
        printf("2. Modificar Descripción (Actual: %s)\n", denunciaMod->descripcion);
        printf("3. Modificar Tipo de Denuncia (Actual: %s)\n", denunciaMod->tipoDeDenuncia);
        printf("4. Salir\n");
        printf("Seleccione una opción: ");

        if (scanf("%d", &opcion) != 1) {
            printf("Entrada inválida. Intente de nuevo.\n");
            while (getchar() != '\n'); // limpiar buffer
            opcion = -1;
            continue;
        }
        while (getchar() != '\n'); // limpiar buffer tras número

        switch (opcion) {
            case 1:
                printf("Ingrese nueva fecha: ");
                if (fgets(palabras, sizeof(palabras), stdin)) {
                    palabras[strcspn(palabras, "\n")] = '\0';
                    free(denunciaMod->fecha);
                    denunciaMod->fecha = strdup(palabras);
                    if (denunciaMod->fecha == NULL) {
                        printf("Error al asignar memoria.\n");
                        return;
                    }
                    printf("Fecha modificada.\n");
                }
                break;
            case 2:
                printf("Ingrese nueva descripción: ");
                if (fgets(palabras, sizeof(palabras), stdin)) {
                    palabras[strcspn(palabras, "\n")] = '\0';
                    free(denunciaMod->descripcion);
                    denunciaMod->descripcion = strdup(palabras);
                    if (denunciaMod->descripcion == NULL) {
                        printf("Error al asignar memoria.\n");
                        return;
                    }
                    printf("Descripción modificada.\n");
                }
                break;
            case 3:
                printf("Ingrese nuevo tipo de denuncia: ");
                if (fgets(palabras, sizeof(palabras), stdin)) {
                    palabras[strcspn(palabras, "\n")] = '\0';
                    free(denunciaMod->tipoDeDenuncia);
                    denunciaMod->tipoDeDenuncia = strdup(palabras);
                    if (denunciaMod->tipoDeDenuncia == NULL) {
                        printf("Error al asignar memoria.\n");
                        return;
                    }
                    printf("Tipo de denuncia modificado.\n");
                }
                break;
            case 4:
                printf("Saliendo del menú de modificación.\n");
                break;
            default:
                printf("Opción inválida. Intente de nuevo.\n");
                break;
        }

    } while (opcion != 4);
}
