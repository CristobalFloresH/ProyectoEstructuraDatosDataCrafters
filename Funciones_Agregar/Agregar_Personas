void agregarPersonas(struct nodoPersonasABB **nodoPersonasABB, struct persona *nuevaPersona){

    // Lista arbol vacia, datos se agregan al inicio
    if(*nodoPersonasABB == NULL){ 

        // se agrega memoria y se verifica que sea correcta
        struct nodoPersonasABB *nuevoNodo = (struct nodoPersonasABB *)malloc(sizeof(struct nodoPersonasABB));
        if (nuevoNodo == NULL) {
            printf("Error al guardar memoria.");
            return;
        }

        // se asignan valores a nuevo nodo
        nuevoNodo->datosPersona = nuevaPersona;
        nuevoNodo->izquierda = NULL;
        nuevoNodo->derecha = NULL;
        *nodoPersonasABB = nuevoNodo;
        return;

    // Busca la posicion correcta en donde agregar la nueva persona segun orden de rut
    }
    // si el rut de la nueva persona, es menor al del nodo actual, va a la izquierda   
    if(strcmp(nuevaPersona->rut, (*nodoPersonasABB)->datosPersona->rut) < 0){

        // llama recursivamente para insertar en la rama izquierda
        agregarPersonas(&((*nodoPersonasABB)->izquierda), nuevaPersona);
    }
    // si el rut de la nueva persona, es mayor al del nodo actual, va a la derecha
    else if(strcmp(nuevaPersona->rut, (*nodoPersonasABB)->datosPersona->rut) > 0){

        //llama recursivamente para insertar en la rama derecha
        agregarPersonas(&((*nodoPersonasABB)->derecha), nuevaPersona);
    }
    //si el rut es igual al nodo actual, la persona ya existe
    else{
        printf("Esta persona ya se registro");   
    }
}
