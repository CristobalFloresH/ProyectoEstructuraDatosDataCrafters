void agregarPersonas(struct nodoPersonas **persona, struct persona *nuevaPersona) { //paso el nodo con doble puntero para modificar el head.
    struct nodoPersonas *nuevoNodo = (struct nodoPersonas *)malloc(sizeof(struct nodoPersonas));
    nuevoNodo->datosPersona = nuevaPersona;

    if (*persona == NULL) { // caso en que la lista circular se encuentre vacia
        *persona = nuevoNodo;
        nuevoNodo->siguiente = nuevoNodo;
        nuevoNodo->anterior = nuevoNodo;
    }

    else { // en caso contrario, agregamos en el ultimo nodo, antes del head.
        struct nodoPersonas *ultimo = (*persona)->anterior;// buscamos el ultimo dato de la lista circular.
        nuevoNodo->siguiente = *persona; 
        nuevoNodo->anterior = ultimo;
        ultimo->siguiente = nuevoNodo;
        (*persona)->anterior = nuevoNodo;
    }
}

void agregarDenunciaAPersona(char *rut ,struct nodoPersonasABB *nodoPersonasABB, struct Denuncia *nuevaDenuncia){
    if(nodoPersonasABB == NULL){
        printf("No se encontraron personas\n");
        return;
    }
    if(strcmp(rut, nodoPersonasABB->datosPersona->rut) == 0){
        
        struct Denuncia *actual = nodoPersonasABB->datosPersona->denuncias;
        
        if(actual == NULL){ /*en caso de que no haya ninguna denuncia entonces se agrega en el primero*/
        
        nodoPersonasABB->datosPersona->denuncias = nuevaDenuncia;
        nuevaDenuncia->siguiente = NULL;
        nuevaDenuncia->anterior = NULL;
        } 
        else {
            
            while(actual->siguiente != NULL){
                actual = actual->siguiente;
            }
            
            actual->siguiente = nuevaDenuncia;
            nuevaDenuncia->anterior = actual;
            nuevaDenuncia->siguiente = NULL;
        }
        return;
    }
    
    if(strcmp(rut, nodoPersonasABB->datosPersona->rut) < 0){
        agregarDenunciaAPersona(rut, nodoPersonasABB->izquierda, nuevaDenuncia);
    } 
    else{
        agregarDenunciaAPersona(rut, nodoPersonasABB->derecha, nuevaDenuncia);
    }
}
