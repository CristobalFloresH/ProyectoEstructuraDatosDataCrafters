void mostrarCausasEstado(struct ministerio *ministerio) {
    int opcion;
    int estadoFiltrado;
    int contador;
    struct nodoCausas *actual;

    if (ministerio == NULL || ministerio->causas == NULL) {
        printf("No hay causas registradas.\n");
        return;
    }

    opcion = -1;
    contador = 0;

    while (opcion != 0) {
        printf("\n========== MENU ESTADO DE CAUSAS ==========\n");
        printf("1. Mostrar todas las causas con su estado\n");
        printf("2. Mostrar causas de un estado especifico\n");
        printf("0. Volver\n");
        printf("Seleccione una opcion: ");
        scanf("%d", &opcion);
        getchar(); // Limpiar buffer

        switch (opcion) {
            case 1:
                actual = ministerio->causas;
                printf("\n========================================\n");
                printf("REPORTE DE TODAS LAS CAUSAS CON ESTADO ACTUAL\n");
                printf("========================================\n");
                do {
                    printf("Causa #%d: RUC: %s | Estado de causa: %d\n", contador, actual->datosCausa->ruc, actual->datosCausa->estadoCausa);
                    contador++;
                    actual = actual->siguiente;
                } while (actual != ministerio->causas);
                contador = 0;
                break;

            case 2:
                printf("Ingrese el estado de causa a mostrar (1=Archivada, 2=En progreso, 3=Cerrada, 4=En juicio): ");
                scanf("%d", &estadoFiltrado);
                getchar();

                actual = ministerio->causas;
                printf("\n========================================\n");
                printf("REPORTE DE CAUSAS CON ESTADO %d\n", estadoFiltrado);
                printf("========================================\n");
                do {
                    if (actual->datosCausa->estadoCausa == estadoFiltrado) {
                        printf("Causa NÂ°%d: RUC: %s | Estado de causa: %d\n", contador, actual->datosCausa->ruc, actual->datosCausa->estadoCausa);
