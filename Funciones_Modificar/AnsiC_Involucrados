void cambiarTipoInvolucrado(struct causa *c, const char *rut, int nuevoTipo) {
    int i;
    struct involucrados *inv;

    if (c == NULL || rut == NULL || c->involucrados == NULL) {
        printf("Error: causa o datos inválidos.\n");
        return;
    }

    for (i = 0; i < c->tamInvolucrados; i++) {
        inv = c->involucrados[i];

        if (inv != NULL && inv->persona != NULL && strcmp(inv->persona->rut, rut) == 0) {
            /* Si era imputado y ya no lo será, liberar datosImputados */
            if (inv->tipoInvolucrado == 2 && nuevoTipo != 2 && inv->datosImputados != NULL) {
                free(inv->datosImputados);
                inv->datosImputados = NULL;
            }

            /* Cambiar tipo */
            inv->tipoInvolucrado = nuevoTipo;

            /* Si ahora es imputado y no tiene datosImputados, inicializarlos */
            if (nuevoTipo == 2 && inv->datosImputados == NULL) {
                inv->datosImputados = (struct datosImputados *)malloc(sizeof(struct datosImputados));
                if (inv->datosImputados == NULL) {
                    printf("Error al asignar memoria para datosImputados.\n");
                    return;
                }

                /* Inicializar campos */
                inv->datosImputados->declaracion = NULL;
                inv->datosImputados->medidasCautelar = 7;
                inv->datosImputados->fechaInicioMedida = NULL;
                inv->datosImputados->fechaFinMedida = NULL;
                inv->datosImputados->estadoProcesal = 1;
            }

            printf("Tipo de involucrado cambiado exitosamente para RUT: %s\n", rut);
            return;
        }
    }

    printf("Involucrado con RUT %s no encontrado en la causa.\n", rut);
}

