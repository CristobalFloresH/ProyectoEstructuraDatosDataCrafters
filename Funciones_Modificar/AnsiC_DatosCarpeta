
void modificarDatosCarpeta(struct ministerio *ministerio) {
    if (ministerio == NULL) {
        printf("Ministerio no válido.\n");
        return;
    }

    char ruc[100];
    printf("Ingrese el RUC de la causa: ");
    fgets(ruc, sizeof(ruc), stdin);
    removerSaltoLinea(ruc);

    // Buscar causa
    struct causa* causa = buscarCausaPorRuc(ministerio, ruc);
    if (causa == NULL) {
        printf("No se encontró una causa con ese RUC.\n");
        return;
    }

    // Obtener la única carpeta
    if (causa->datosCarpetas == NULL || causa->datosCarpetas->datosCarpeta == NULL) {
        printf("No hay carpeta investigativa asociada a esta causa.\n");
        return;
    }

    struct datosCarpeta *carpeta = causa->datosCarpetas->datosCarpeta;

    int opcion = -1;
    char buffer[300];
    char* nuevaCadena;

    while (opcion != 0) {
        printf("\n--- Modificar Datos de Carpeta ---\n");
        printf("1. Modificar fecha (Actual: %s)\n", carpeta->fecha);
        printf("2. Modificar descripción (Actual: %s)\n", carpeta->descripcion);
        printf("3. Modificar tipo de dato (Actual: %d)\n", carpeta->tipoDeDato);
        printf("0. Salir\n");
        printf("Seleccione una opción: ");

        if (scanf("%d", &opcion) != 1) {
            printf("Entrada inválida.\n");
            while (getchar() != '\n');
            opcion = -1;
            continue;
        }
        getchar(); // limpiar salto de línea

        switch (opcion) {
            case 1:
                printf("Ingrese nueva fecha (YYYY-MM-DD): ");
                if (fgets(buffer, sizeof(buffer), stdin)) {
                    removerSaltoLinea(buffer);
                    nuevaCadena = duplicarCadena(buffer);
                    free(carpeta->fecha);
                    carpeta->fecha = nuevaCadena;
                    printf("Fecha actualizada correctamente.\n");
                }
                break;

            case 2:
                printf("Ingrese nueva descripción: ");
                if (fgets(buffer, sizeof(buffer), stdin)) {
                    removerSaltoLinea(buffer);
                    nuevaCadena = duplicarCadena(buffer);
                    if (nuevaCadena != NULL) {
                        free(carpeta->descripcion);
                        carpeta->descripcion = nuevaCadena;
                        printf("Descripción actualizada correctamente.\n");
                    } else {
                        printf("Error al asignar memoria.\n");
                    }
                }
                break;

            case 3: {
                int nuevo_tipo;
                do {
                    printf("Ingrese nuevo tipo de dato (1=declaraciones, 2=pruebas generales, 3=diligencias, 4=denuncia): ");
                    if (scanf("%d", &nuevo_tipo) != 1) {
                        printf("Entrada inválida.\n");
                        while (getchar() != '\n');
                        continue;
                    }
                    while (getchar() != '\n');
                    if (nuevo_tipo < 1 || nuevo_tipo > 4) {
                        printf("Tipo de dato inválido. Intente nuevamente.\n");
                    }
                } while (nuevo_tipo < 1 || nuevo_tipo > 4);

                carpeta->tipoDeDato = nuevo_tipo;
                printf("Tipo de dato actualizado correctamente.\n");
                break;
            }

            case 0:
                printf("Saliendo...\n");
                break;

            default:
                printf("Opción inválida. Intente nuevamente.\n");
                break;
        }
    }
}
