void modificarDatosDiligencia(struct datosDiligencias *diligencia) {
    if (diligencia == NULL) {
        printf("Datos de diligencia inválidos.\n");
        return;
    }

    int opcion = -1;
    char buffer[300];
    char *nuevaCadena;

    while (opcion != 0) {
        printf("\n--- Modificar Datos de Diligencia ---\n");
        printf("1. Modificar prioridad (Actual: %d)\n", diligencia->prioridad);
        printf("2. Modificar fecha inicio (Actual: %s)\n", diligencia->fechaInicio);
        printf("3. Modificar fecha fin (Actual: %s)\n", diligencia->fechaFin);
        printf("4. Modificar descripción (Actual: %s)\n", diligencia->descripcion);
        printf("5. Modificar estado (Actual: %s)\n", diligencia->estado);
        printf("6. Modificar tipo de diligencia (Actual: %s)\n", diligencia->tipoDiligencia);
        printf("0. Salir\n");
        printf("Seleccione una opción: ");

        if (scanf("%d", &opcion) != 1) {
            printf("Entrada inválida.\n");
            while (getchar() != '\n'); // limpiar buffer
            opcion = -1;
            continue;
        } // aseguramos la entrada de la opcion, para que no sea invalida 

        while (getchar() != '\n');  // limpiar buffer tras scanf, evita datos reciduales 

        switch (opcion) {
            case 1:
                int nueva_prioridad;
                do {
                    printf("Ingrese nueva prioridad (1 = muy baja, ..., 5 = muy alta): ");
                    if (scanf("%d", &nueva_prioridad) != 1) {
                        printf("Entrada inválida.\n");
                        while (getchar() != '\n');
                        continue;
                    }
                    while (getchar() != '\n');
                    if (nueva_prioridad < 1 || nueva_prioridad > 5) {
                    printf("Prioridad inválida. Intente nuevamente.\n");
                }
                } while (nueva_prioridad < 1 || nueva_prioridad > 5);

                diligencia->prioridad = nueva_prioridad;
                printf("Prioridad actualizada correctamente.\n");

                
            case 2:
                printf("Ingrese nueva fecha inicio (YYYY-MM-DD): ");
                if (fgets(buffer, sizeof(buffer), stdin)) {
                    removerSaltoLinea(buffer);
                    nuevaCadena = duplicarCadena(buffer);
                    if (nuevaCadena != NULL) {
                        free(diligencia->fechaInicio);
                        diligencia->fechaInicio = nuevaCadena;
                        printf("Fecha inicio actualizada correctamente.\n");
                    } else {
                        printf("Error al asignar memoria.\n");
                    }
                }
                break;

            case 3:
                printf("Ingrese nueva fecha fin (YYYY-MM-DD): ");
                if (fgets(buffer, sizeof(buffer), stdin)) {
                    removerSaltoLinea(buffer);
                    nuevaCadena = duplicarCadena(buffer);
                    if (nuevaCadena != NULL) {
                        free(diligencia->fechaFin);
                        diligencia->fechaFin = nuevaCadena;
                        printf("Fecha fin actualizada correctamente.\n");
                    } else {
                        printf("Error al asignar memoria.\n");
                    }
                }
                break;

            case 4:
                printf("Ingrese nueva descripción: ");
                if (fgets(buffer, sizeof(buffer), stdin)) {
                    removerSaltoLinea(buffer);
                    nuevaCadena = duplicarCadena(buffer);
                    if (nuevaCadena != NULL) {
                        free(diligencia->descripcion);
                        diligencia->descripcion = nuevaCadena;
                        printf("Descripción actualizada correctamente.\n");
                    } else {
                        printf("Error al asignar memoria.\n");
                    }
                }
                break;

            case 5:
                printf("Ingrese nuevo estado: ");
                if (fgets(buffer, sizeof(buffer), stdin)) {
                    removerSaltoLinea(buffer);
                    nuevaCadena = duplicarCadena(buffer);
                    if (nuevaCadena != NULL) {
                        free(diligencia->estado);
                        diligencia->estado = nuevaCadena;
                        printf("Estado actualizado correctamente.\n");
                    } else {
                        printf("Error al asignar memoria.\n");
                    }
                }
                break;

            case 6:
                printf("Ingrese nuevo tipo de diligencia: ");
                if (fgets(buffer, sizeof(buffer), stdin)) {
                    removerSaltoLinea(buffer);
                    nuevaCadena = duplicarCadena(buffer);
                    if (nuevaCadena != NULL) {
                        free(diligencia->tipoDiligencia);
                        diligencia->tipoDiligencia = nuevaCadena;
                        printf("Tipo de diligencia actualizado correctamente.\n");
                    } else {
                        printf("Error al asignar memoria.\n");
                    }
                }
                break;

            case 0:
                printf("Saliendo...\n");
                break;

            default:
                printf("Opción inválida. Intente nuevamente.\n");
        }
    }
}
