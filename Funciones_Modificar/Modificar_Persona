void modificarPersona(struct persona *p) { // puntero simple ya que solo necesitamos los datos de cada persona y no cambiar su direccion de memoria 
    int opcion;
    char palabra[300];

    do {
        printf("\n--- Modificar Persona (%s %s) ---\n", p->nombre, p->apellido);
        printf("1. Cambiar nombre\n");
        printf("2. Cambiar apellido\n");
        printf("3. Cambiar contraseña\n");
        printf("4. Cambiar rol (actual: %d)\n", p->rol);
        printf("0. Salir\n");
        printf("Seleccione una opción: ");
        if (scanf("%d", &opcion) != 1) {
            printf("Entrada inválida.\n");
            while (getchar() != '\n'); // Limpia el buffer
            opcion = -1; // Para que no salga del menú
            continue;
        }
        getchar(); // limpia salto de línea pendiente

        switch(opcion) {
            case 1:
                printf("Nuevo nombre: ");
                fgets(palabra, sizeof(palabra), stdin);
                palabra[strcspn(palabra, "\n")] = '\0'; 
                free(p->nombre); // Libera memoria pero no la borra la direccion de memoria
                p->nombre = strdup(palabra); // strdup se encarga de reservar memoria necesaria 
                break;
            case 2:
                printf("Nuevo apellido: ");
                fgets(palabra, sizeof(palabra), stdin);
                palabra[strcspn(palabra, "\n")] = '\0'; // quitar \n
                free(p->apellido);
                p->apellido = strdup(palabra);
                break;
            case 3:
                printf("Nueva contraseña: ");
                fgets(palabra, sizeof(palabra), stdin);
                palabra[strcspn(palabra, "\n")] = '\0'; // quitar \n
                free(p->contrasena);
                p->contrasena = strdup(palabra);
                break;
            case 4:
                do {
                    printf("Nuevo rol (1 = usuario común, 2 = fiscal, 3 = juez): ");
                    if (scanf("%d", &p->rol) != 1) {
                        printf("Entrada inválida. Intente nuevamente.\n");
                        while (getchar() != '\n'); // Limpiar el buffer
                        p->rol = -1; // Forzamos la repetición del bucle
                        continue;
                    }
                    if (p->rol < 1 || p->rol > 3) {
                        printf("Rol inválido. Intente nuevamente.\n");
                    }
                } while (p->rol < 1 || p->rol > 3);
                getchar(); // Limpia el salto de línea restante
                break;
            case 0:
                break;
            default:
                printf("Opción inválida. Intente nuevamente.\n");
        }

    } while (opcion != 0);
}

void modificarDatosPersona(struct ministerio *ministerio) { // puntero simple ya que solo necesitamos ingresar a los datos y modificarlos, no cambiarlos de dirrecion de memoria 
    char rut[20];
    printf("Ingrese RUT de la persona a modificar: ");
    scanf(" %[^\n]", rut);

    struct persona *p = buscarPersonaPorRut(ministerio->personas, rut);
    if (p != NULL)
        modificarPersona(p);
    else
        printf("Persona no encontrada.\n");
}
